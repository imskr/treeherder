[
  {
    "sha": "c9c5f8b9e545ae292d4ccb256758cb681a744612",
    "node_id": "MDY6Q29tbWl0MzM5MDI0MzpjOWM1ZjhiOWU1NDVhZTI5MmQ0Y2NiMjU2NzU4Y2I2ODFhNzQ0NjEy",
    "commit": {
      "author": {
        "name": "bors-servo",
        "email": "lbergstrom+bors@mozilla.com",
        "date": "2020-02-25T06:18:34Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2020-02-25T06:18:34Z"
      },
      "message": "Auto merge of #25796 - gterzian:implement_broadcast_channel, r=Manishearth\n\nImplement Broadcastchannel\n\n<!-- Please describe your changes on the following line: -->\n\nFIX #21025\n\n---\n<!-- Thank you for contributing to Servo! Please replace each `[ ]` by `[X]` when the step is complete, and replace `___` with appropriate data: -->\n- [ ] `./mach build -d` does not report any errors\n- [ ] `./mach test-tidy` does not report any errors\n- [ ] These changes fix #___ (GitHub issue number if applicable)\n\n<!-- Either: -->\n- [ ] There are tests for these changes OR\n- [ ] These changes do not require tests because ___\n\n<!-- Also, please make sure that \"Allow edits from maintainers\" checkbox is checked, so that we can help you if you get stuck somewhere along the way.-->\n\n<!-- Pull requests that do not address these steps are welcome, but they will require additional verification as part of the review process. -->",
      "tree": {
        "sha": "557d98fa98c2b57cf2084e100a9980bc9eb314d5",
        "url": "https://api.github.com/repos/servo/servo/git/trees/557d98fa98c2b57cf2084e100a9980bc9eb314d5"
      },
      "url": "https://api.github.com/repos/servo/servo/git/commits/c9c5f8b9e545ae292d4ccb256758cb681a744612",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVLw6CRBK7hj4Ov3rIwAAdHIIADQ7JpjRHfQIiZTZPfNu+juI\noJdMoNuUFzBqYjksyXT0sqiS0FraG7y3p2Dyp00mzgGDYOVKM/Qv63Qo80tqf+u/\ndSzEwgdJS5Ivjqj4iDWD1l6Zd87XDI3SQsO2ora5Yy/amx/xMVYQkdzdBHatgkTC\nWzo6maT7M7sLGs/HPyRZIqMxR8NYzEyzfr2LP2aOHeoB4dz4dxOl2/HPuLu+f2T7\nqMPWgxetbQqwFHwBb7J7xD02Rchm02b6rcuQKOUCBpi/B4ofYmvKumH47M3xN86z\nDpEhNLavwfRTwPpxZqiYatgI4DjKYTA3jtKuVsv/7BpxCR7YJu9+vJKJIXEJyok=\n=N9AO\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 557d98fa98c2b57cf2084e100a9980bc9eb314d5\nparent 13977bbeddd25cff0a4c5ed1adb17936501de1fe\nparent 99e4d740e4e30946552d61c4365e6f59797e01ba\nauthor bors-servo <lbergstrom+bors@mozilla.com> 1582611514 -0500\ncommitter GitHub <noreply@github.com> 1582611514 -0500\n\nAuto merge of #25796 - gterzian:implement_broadcast_channel, r=Manishearth\n\nImplement Broadcastchannel\n\n<!-- Please describe your changes on the following line: -->\n\nFIX #21025\n\n---\n<!-- Thank you for contributing to Servo! Please replace each `[ ]` by `[X]` when the step is complete, and replace `___` with appropriate data: -->\n- [ ] `./mach build -d` does not report any errors\n- [ ] `./mach test-tidy` does not report any errors\n- [ ] These changes fix #___ (GitHub issue number if applicable)\n\n<!-- Either: -->\n- [ ] There are tests for these changes OR\n- [ ] These changes do not require tests because ___\n\n<!-- Also, please make sure that \"Allow edits from maintainers\" checkbox is checked, so that we can help you if you get stuck somewhere along the way.-->\n\n<!-- Pull requests that do not address these steps are welcome, but they will require additional verification as part of the review process. -->\n"
      }
    },
    "url": "https://api.github.com/repos/servo/servo/commits/c9c5f8b9e545ae292d4ccb256758cb681a744612",
    "html_url": "https://github.com/servo/servo/commit/c9c5f8b9e545ae292d4ccb256758cb681a744612",
    "comments_url": "https://api.github.com/repos/servo/servo/commits/c9c5f8b9e545ae292d4ccb256758cb681a744612/comments",
    "author": {
      "login": "bors-servo",
      "id": 4368172,
      "node_id": "MDQ6VXNlcjQzNjgxNzI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4368172?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bors-servo",
      "html_url": "https://github.com/bors-servo",
      "followers_url": "https://api.github.com/users/bors-servo/followers",
      "following_url": "https://api.github.com/users/bors-servo/following{/other_user}",
      "gists_url": "https://api.github.com/users/bors-servo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bors-servo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bors-servo/subscriptions",
      "organizations_url": "https://api.github.com/users/bors-servo/orgs",
      "repos_url": "https://api.github.com/users/bors-servo/repos",
      "events_url": "https://api.github.com/users/bors-servo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bors-servo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "url": "https://api.github.com/repos/servo/servo/commits/13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "html_url": "https://github.com/servo/servo/commit/13977bbeddd25cff0a4c5ed1adb17936501de1fe"
      },
      {
        "sha": "99e4d740e4e30946552d61c4365e6f59797e01ba",
        "url": "https://api.github.com/repos/servo/servo/commits/99e4d740e4e30946552d61c4365e6f59797e01ba",
        "html_url": "https://github.com/servo/servo/commit/99e4d740e4e30946552d61c4365e6f59797e01ba"
      }
    ],
    "stats": {
      "total": 1003,
      "additions": 779,
      "deletions": 224
    },
    "files": [
      {
        "sha": "47e59c37342c66e091e3bf5ce722a7a037b7f7d5",
        "filename": "components/constellation/constellation.rs",
        "status": "modified",
        "additions": 208,
        "deletions": 5,
        "changes": 213,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/constellation/constellation.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/constellation/constellation.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/constellation/constellation.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -126,12 +126,12 @@ use log::{Level, LevelFilter, Log, Metadata, Record};\n use media::{GLPlayerThreads, WindowGLContext};\n use msg::constellation_msg::{BackgroundHangMonitorRegister, HangMonitorAlert, SamplerControlMsg};\n use msg::constellation_msg::{\n-    BrowsingContextGroupId, BrowsingContextId, HistoryStateId, PipelineId,\n-    TopLevelBrowsingContextId,\n+    BroadcastChannelRouterId, MessagePortId, MessagePortRouterId, PipelineNamespace,\n+    PipelineNamespaceId, PipelineNamespaceRequest, TraversalDirection,\n };\n use msg::constellation_msg::{\n-    MessagePortId, MessagePortRouterId, PipelineNamespace, PipelineNamespaceId,\n-    PipelineNamespaceRequest, TraversalDirection,\n+    BrowsingContextGroupId, BrowsingContextId, HistoryStateId, PipelineId,\n+    TopLevelBrowsingContextId,\n };\n use net_traits::pub_domains::reg_host;\n use net_traits::request::RequestBuilder;\n@@ -142,7 +142,8 @@ use profile_traits::time;\n use script_traits::CompositorEvent::{MouseButtonEvent, MouseMoveEvent};\n use script_traits::{webdriver_msg, LogEntry, ScriptToConstellationChan, ServiceWorkerMsg};\n use script_traits::{\n-    AnimationState, AnimationTickType, AuxiliaryBrowsingContextLoadInfo, CompositorEvent,\n+    AnimationState, AnimationTickType, AuxiliaryBrowsingContextLoadInfo, BroadcastMsg,\n+    CompositorEvent,\n };\n use script_traits::{ConstellationControlMsg, DiscardBrowsingContext};\n use script_traits::{DocumentActivity, DocumentState, LayoutControlMsg, LoadData, LoadOrigin};\n@@ -399,6 +400,12 @@ pub struct Constellation<Message, LTF, STF> {\n     /// A map of router-id to ipc-sender, to route messages to ports.\n     message_port_routers: HashMap<MessagePortRouterId, IpcSender<MessagePortMsg>>,\n \n+    /// A map of broadcast routers to their IPC sender.\n+    broadcast_routers: HashMap<BroadcastChannelRouterId, IpcSender<BroadcastMsg>>,\n+\n+    /// A map of origin to a map of channel-name to a list of relevant routers.\n+    broadcast_channels: HashMap<ImmutableOrigin, HashMap<String, Vec<BroadcastChannelRouterId>>>,\n+\n     /// The set of all the pipelines in the browser.  (See the `pipeline` module\n     /// for more details.)\n     pipelines: HashMap<PipelineId, Pipeline>,\n@@ -961,6 +968,8 @@ where\n                     browsing_context_group_next_id: Default::default(),\n                     message_ports: HashMap::new(),\n                     message_port_routers: HashMap::new(),\n+                    broadcast_routers: HashMap::new(),\n+                    broadcast_channels: HashMap::new(),\n                     pipelines: HashMap::new(),\n                     browsing_contexts: HashMap::new(),\n                     pending_changes: vec![],\n@@ -1760,6 +1769,36 @@ where\n             FromScriptMsg::EntanglePorts(port1, port2) => {\n                 self.handle_entangle_messageports(port1, port2);\n             },\n+            FromScriptMsg::NewBroadcastChannelRouter(router_id, ipc_sender, origin) => {\n+                self.handle_new_broadcast_channel_router(\n+                    source_pipeline_id,\n+                    router_id,\n+                    ipc_sender,\n+                    origin,\n+                );\n+            },\n+            FromScriptMsg::NewBroadcastChannelNameInRouter(router_id, channel_name, origin) => {\n+                self.handle_new_broadcast_channel_name_in_router(\n+                    source_pipeline_id,\n+                    router_id,\n+                    channel_name,\n+                    origin,\n+                );\n+            },\n+            FromScriptMsg::RemoveBroadcastChannelNameInRouter(router_id, channel_name, origin) => {\n+                self.handle_remove_broadcast_channel_name_in_router(\n+                    source_pipeline_id,\n+                    router_id,\n+                    channel_name,\n+                    origin,\n+                );\n+            },\n+            FromScriptMsg::RemoveBroadcastChannelRouter(router_id, origin) => {\n+                self.handle_remove_broadcast_channel_router(source_pipeline_id, router_id, origin);\n+            },\n+            FromScriptMsg::ScheduleBroadcast(router_id, message) => {\n+                self.handle_schedule_broadcast(source_pipeline_id, router_id, message);\n+            },\n             FromScriptMsg::ForwardToEmbedder(embedder_msg) => {\n                 self.embedder_proxy\n                     .send((Some(source_top_ctx_id), embedder_msg));\n@@ -1976,6 +2015,170 @@ where\n         }\n     }\n \n+    /// Check the origin of a message against that of the pipeline it came from.\n+    /// Note: this is still limited as a security check,\n+    /// see https://github.com/servo/servo/issues/11722\n+    fn check_origin_against_pipeline(\n+        &self,\n+        pipeline_id: &PipelineId,\n+        origin: &ImmutableOrigin,\n+    ) -> Result<(), ()> {\n+        let pipeline_origin = match self.pipelines.get(&pipeline_id) {\n+            Some(pipeline) => pipeline.load_data.url.origin(),\n+            None => {\n+                warn!(\"Received message from closed or unknown pipeline.\");\n+                return Err(());\n+            },\n+        };\n+        if &pipeline_origin == origin {\n+            return Ok(());\n+        }\n+        Err(())\n+    }\n+\n+    /// Broadcast a message via routers in various event-loops.\n+    fn handle_schedule_broadcast(\n+        &self,\n+        pipeline_id: PipelineId,\n+        router_id: BroadcastChannelRouterId,\n+        message: BroadcastMsg,\n+    ) {\n+        if self\n+            .check_origin_against_pipeline(&pipeline_id, &message.origin)\n+            .is_err()\n+        {\n+            return warn!(\n+                \"Attempt to schedule broadcast from an origin not matching the origin of the msg.\"\n+            );\n+        }\n+        if let Some(channels) = self.broadcast_channels.get(&message.origin) {\n+            let routers = match channels.get(&message.channel_name) {\n+                Some(routers) => routers,\n+                None => return warn!(\"Broadcast to channel name without active routers.\"),\n+            };\n+            for router in routers {\n+                // Exclude the sender of the broadcast.\n+                // Broadcasting locally is done at the point of sending.\n+                if router == &router_id {\n+                    continue;\n+                }\n+\n+                if let Some(sender) = self.broadcast_routers.get(&router) {\n+                    if sender.send(message.clone()).is_err() {\n+                        warn!(\"Failed to broadcast message to router: {:?}\", router);\n+                    }\n+                } else {\n+                    warn!(\"No sender for broadcast router: {:?}\", router);\n+                }\n+            }\n+        } else {\n+            warn!(\n+                \"Attempt to schedule a broadcast for an origin without routers {:?}\",\n+                message.origin\n+            );\n+        }\n+    }\n+\n+    /// Remove a channel-name for a given broadcast router.\n+    fn handle_remove_broadcast_channel_name_in_router(\n+        &mut self,\n+        pipeline_id: PipelineId,\n+        router_id: BroadcastChannelRouterId,\n+        channel_name: String,\n+        origin: ImmutableOrigin,\n+    ) {\n+        if self\n+            .check_origin_against_pipeline(&pipeline_id, &origin)\n+            .is_err()\n+        {\n+            return warn!(\"Attempt to remove channel name from an unexpected origin.\");\n+        }\n+        if let Some(channels) = self.broadcast_channels.get_mut(&origin) {\n+            let is_empty = if let Some(routers) = channels.get_mut(&channel_name) {\n+                routers.retain(|router| router != &router_id);\n+                routers.is_empty()\n+            } else {\n+                return warn!(\n+                    \"Multiple attemps to remove name for broadcast-channel {:?} at {:?}\",\n+                    channel_name, origin\n+                );\n+            };\n+            if is_empty {\n+                channels.remove(&channel_name);\n+            }\n+        } else {\n+            warn!(\n+                \"Attempt to remove a channel-name for an origin without channels {:?}\",\n+                origin\n+            );\n+        }\n+    }\n+\n+    /// Note a new channel-name relevant to a given broadcast router.\n+    fn handle_new_broadcast_channel_name_in_router(\n+        &mut self,\n+        pipeline_id: PipelineId,\n+        router_id: BroadcastChannelRouterId,\n+        channel_name: String,\n+        origin: ImmutableOrigin,\n+    ) {\n+        if self\n+            .check_origin_against_pipeline(&pipeline_id, &origin)\n+            .is_err()\n+        {\n+            return warn!(\"Attempt to add channel name from an unexpected origin.\");\n+        }\n+        let channels = self\n+            .broadcast_channels\n+            .entry(origin)\n+            .or_insert_with(HashMap::new);\n+\n+        let routers = channels.entry(channel_name).or_insert_with(Vec::new);\n+\n+        routers.push(router_id);\n+    }\n+\n+    /// Remove a broadcast router.\n+    fn handle_remove_broadcast_channel_router(\n+        &mut self,\n+        pipeline_id: PipelineId,\n+        router_id: BroadcastChannelRouterId,\n+        origin: ImmutableOrigin,\n+    ) {\n+        if self\n+            .check_origin_against_pipeline(&pipeline_id, &origin)\n+            .is_err()\n+        {\n+            return warn!(\"Attempt to remove broadcast router from an unexpected origin.\");\n+        }\n+        if self.broadcast_routers.remove(&router_id).is_none() {\n+            warn!(\"Attempt to remove unknown broadcast-channel router.\");\n+        }\n+    }\n+\n+    /// Add a new broadcast router.\n+    fn handle_new_broadcast_channel_router(\n+        &mut self,\n+        pipeline_id: PipelineId,\n+        router_id: BroadcastChannelRouterId,\n+        ipc_sender: IpcSender<BroadcastMsg>,\n+        origin: ImmutableOrigin,\n+    ) {\n+        if self\n+            .check_origin_against_pipeline(&pipeline_id, &origin)\n+            .is_err()\n+        {\n+            return warn!(\"Attempt to add broadcast router from an unexpected origin.\");\n+        }\n+        if self\n+            .broadcast_routers\n+            .insert(router_id, ipc_sender)\n+            .is_some()\n+        {\n+            warn!(\"Multple attempt to add broadcast-channel router.\");\n+        }\n+    }\n+\n     fn handle_request_wgpu_adapter(\n         &mut self,\n         source_pipeline_id: PipelineId,"
      },
      {
        "sha": "a878bc43d3d246b46a06a8200e8f1ebc3f257246",
        "filename": "components/msg/constellation_msg.rs",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/msg/constellation_msg.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/msg/constellation_msg.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/msg/constellation_msg.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -171,6 +171,13 @@ impl PipelineNamespace {\n         }\n     }\n \n+    fn next_broadcast_channel_router_id(&mut self) -> BroadcastChannelRouterId {\n+        BroadcastChannelRouterId {\n+            namespace_id: self.id,\n+            index: BroadcastChannelRouterIndex(self.next_index()),\n+        }\n+    }\n+\n     fn next_blob_id(&mut self) -> BlobId {\n         BlobId {\n             namespace_id: self.id,\n@@ -380,6 +387,42 @@ impl fmt::Display for MessagePortRouterId {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]\n+pub struct BroadcastChannelRouterIndex(pub NonZeroU32);\n+malloc_size_of_is_0!(BroadcastChannelRouterIndex);\n+\n+#[derive(\n+    Clone, Copy, Debug, Deserialize, Eq, Hash, MallocSizeOf, Ord, PartialEq, PartialOrd, Serialize,\n+)]\n+pub struct BroadcastChannelRouterId {\n+    pub namespace_id: PipelineNamespaceId,\n+    pub index: BroadcastChannelRouterIndex,\n+}\n+\n+impl BroadcastChannelRouterId {\n+    pub fn new() -> BroadcastChannelRouterId {\n+        PIPELINE_NAMESPACE.with(|tls| {\n+            let mut namespace = tls.get().expect(\"No namespace set for this thread!\");\n+            let next_broadcast_channel_router_id = namespace.next_broadcast_channel_router_id();\n+            tls.set(Some(namespace));\n+            next_broadcast_channel_router_id\n+        })\n+    }\n+}\n+\n+impl fmt::Display for BroadcastChannelRouterId {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        let PipelineNamespaceId(namespace_id) = self.namespace_id;\n+        let BroadcastChannelRouterIndex(index) = self.index;\n+        write!(\n+            fmt,\n+            \"(BroadcastChannelRouterId{},{})\",\n+            namespace_id,\n+            index.get()\n+        )\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize)]\n pub struct BlobIndex(pub NonZeroU32);\n malloc_size_of_is_0!(BlobIndex);"
      },
      {
        "sha": "5e99e78d03d036eb5aa0bcced3fb0d989d58bd2d",
        "filename": "components/script/dom/bindings/trace.rs",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/bindings/trace.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/bindings/trace.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script/dom/bindings/trace.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -83,8 +83,8 @@ use media::WindowGLContext;\n use metrics::{InteractiveMetrics, InteractiveWindow};\n use mime::Mime;\n use msg::constellation_msg::{\n-    BlobId, BrowsingContextId, HistoryStateId, MessagePortId, MessagePortRouterId, PipelineId,\n-    TopLevelBrowsingContextId,\n+    BlobId, BroadcastChannelRouterId, BrowsingContextId, HistoryStateId, MessagePortId,\n+    MessagePortRouterId, PipelineId, TopLevelBrowsingContextId,\n };\n use net_traits::filemanager_thread::RelativePos;\n use net_traits::image::base::{Image, ImageMetadata};\n@@ -175,6 +175,8 @@ unsafe_no_jsmanaged_fields!(MessagePortId);\n unsafe_no_jsmanaged_fields!(RefCell<Option<MessagePortId>>);\n unsafe_no_jsmanaged_fields!(MessagePortRouterId);\n \n+unsafe_no_jsmanaged_fields!(BroadcastChannelRouterId);\n+\n unsafe_no_jsmanaged_fields!(BlobId);\n unsafe_no_jsmanaged_fields!(BlobImpl);\n "
      },
      {
        "sha": "4a1e35d2ad8908d0d455eb94ea07080e44cf6940",
        "filename": "components/script/dom/broadcastchannel.rs",
        "status": "added",
        "additions": 106,
        "deletions": 0,
        "changes": 106,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/broadcastchannel.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/broadcastchannel.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script/dom/broadcastchannel.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -0,0 +1,106 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+use crate::dom::bindings::codegen::Bindings::BroadcastChannelBinding::{\n+    BroadcastChannelMethods, Wrap,\n+};\n+use crate::dom::bindings::error::{Error, ErrorResult};\n+use crate::dom::bindings::reflector::{reflect_dom_object, DomObject};\n+use crate::dom::bindings::root::DomRoot;\n+use crate::dom::bindings::str::DOMString;\n+use crate::dom::bindings::structuredclone;\n+use crate::dom::eventtarget::EventTarget;\n+use crate::dom::globalscope::GlobalScope;\n+use crate::script_runtime::JSContext as SafeJSContext;\n+use dom_struct::dom_struct;\n+use js::rust::HandleValue;\n+use script_traits::BroadcastMsg;\n+use std::cell::Cell;\n+use uuid::Uuid;\n+\n+#[dom_struct]\n+pub struct BroadcastChannel {\n+    eventtarget: EventTarget,\n+    name: DOMString,\n+    closed: Cell<bool>,\n+    id: Uuid,\n+}\n+\n+impl BroadcastChannel {\n+    /// <https://html.spec.whatwg.org/multipage/#broadcastchannel>\n+    #[allow(non_snake_case)]\n+    pub fn Constructor(global: &GlobalScope, name: DOMString) -> DomRoot<BroadcastChannel> {\n+        BroadcastChannel::new(global, name)\n+    }\n+\n+    pub fn new(global: &GlobalScope, name: DOMString) -> DomRoot<BroadcastChannel> {\n+        let channel = reflect_dom_object(\n+            Box::new(BroadcastChannel::new_inherited(name)),\n+            global,\n+            Wrap,\n+        );\n+        global.track_broadcast_channel(&*channel);\n+        channel\n+    }\n+\n+    pub fn new_inherited(name: DOMString) -> BroadcastChannel {\n+        BroadcastChannel {\n+            eventtarget: EventTarget::new_inherited(),\n+            name,\n+            closed: Default::default(),\n+            id: Uuid::new_v4(),\n+        }\n+    }\n+\n+    /// The unique Id of this channel.\n+    /// Used for filtering out the sender from the local broadcast.\n+    pub fn id(&self) -> &Uuid {\n+        &self.id\n+    }\n+\n+    /// Is this channel closed?\n+    pub fn closed(&self) -> bool {\n+        self.closed.get()\n+    }\n+}\n+\n+impl BroadcastChannelMethods for BroadcastChannel {\n+    /// <https://html.spec.whatwg.org/multipage/#dom-messageport-postmessage>\n+    fn PostMessage(&self, cx: SafeJSContext, message: HandleValue) -> ErrorResult {\n+        // Step 3, if closed.\n+        if self.closed.get() {\n+            return Err(Error::InvalidState);\n+        }\n+\n+        // Step 6, StructuredSerialize(message).\n+        let data = structuredclone::write(cx, message, None)?;\n+\n+        let global = self.global();\n+\n+        let msg = BroadcastMsg {\n+            origin: global.origin().immutable().clone(),\n+            channel_name: self.Name().to_string(),\n+            data,\n+        };\n+\n+        global.schedule_broadcast(msg, &self.id);\n+        Ok(())\n+    }\n+\n+    /// <https://html.spec.whatwg.org/multipage/#dom-broadcastchannel-name>\n+    fn Name(&self) -> DOMString {\n+        self.name.clone()\n+    }\n+\n+    /// <https://html.spec.whatwg.org/multipage/#dom-broadcastchannel-close>\n+    fn Close(&self) {\n+        self.closed.set(true);\n+    }\n+\n+    /// <https://html.spec.whatwg.org/multipage/#handler-broadcastchannel-onmessageerror>\n+    event_handler!(messageerror, GetOnmessageerror, SetOnmessageerror);\n+\n+    /// <https://html.spec.whatwg.org/multipage/#handler-broadcastchannel-onmessage>\n+    event_handler!(message, GetOnmessage, SetOnmessage);\n+}"
      },
      {
        "sha": "2ee7190cfedc20566000d49597bbf770d460915e",
        "filename": "components/script/dom/globalscope.rs",
        "status": "modified",
        "additions": 278,
        "deletions": 3,
        "changes": 281,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/globalscope.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/globalscope.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script/dom/globalscope.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -3,6 +3,7 @@\n  * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n \n use crate::dom::bindings::cell::DomRefCell;\n+use crate::dom::bindings::codegen::Bindings::BroadcastChannelBinding::BroadcastChannelMethods;\n use crate::dom::bindings::codegen::Bindings::EventSourceBinding::EventSourceBinding::EventSourceMethods;\n use crate::dom::bindings::codegen::Bindings::VoidFunctionBinding::VoidFunction;\n use crate::dom::bindings::codegen::Bindings::WindowBinding::WindowMethods;\n@@ -19,6 +20,7 @@ use crate::dom::bindings::structuredclone;\n use crate::dom::bindings::utils::to_frozen_array;\n use crate::dom::bindings::weakref::{DOMTracker, WeakRef};\n use crate::dom::blob::Blob;\n+use crate::dom::broadcastchannel::BroadcastChannel;\n use crate::dom::crypto::Crypto;\n use crate::dom::dedicatedworkerglobalscope::DedicatedWorkerGlobalScope;\n use crate::dom::errorevent::ErrorEvent;\n@@ -71,7 +73,9 @@ use js::rust::wrappers::EvaluateUtf8;\n use js::rust::{get_object_class, CompileOptionsWrapper, ParentRuntime, Runtime};\n use js::rust::{HandleValue, MutableHandleValue};\n use js::{JSCLASS_IS_DOMJSCLASS, JSCLASS_IS_GLOBAL};\n-use msg::constellation_msg::{BlobId, MessagePortId, MessagePortRouterId, PipelineId};\n+use msg::constellation_msg::{\n+    BlobId, BroadcastChannelRouterId, MessagePortId, MessagePortRouterId, PipelineId,\n+};\n use net_traits::blob_url_store::{get_blob_origin, BlobBuf};\n use net_traits::filemanager_thread::{\n     FileManagerResult, FileManagerThreadMsg, ReadFileProgress, RelativePos,\n@@ -82,7 +86,8 @@ use profile_traits::{ipc as profile_ipc, mem as profile_mem, time as profile_tim\n use script_traits::serializable::{BlobData, BlobImpl, FileBlob};\n use script_traits::transferable::MessagePortImpl;\n use script_traits::{\n-    MessagePortMsg, MsDuration, PortMessageTask, ScriptMsg, ScriptToConstellationChan, TimerEvent,\n+    BroadcastMsg, MessagePortMsg, MsDuration, PortMessageTask, ScriptMsg,\n+    ScriptToConstellationChan, TimerEvent,\n };\n use script_traits::{TimerEventId, TimerSchedulerMsg, TimerSource};\n use servo_url::{MutableOrigin, ServoUrl};\n@@ -124,6 +129,9 @@ pub struct GlobalScope {\n     /// The message-port router id for this global, if it is managing ports.\n     message_port_state: DomRefCell<MessagePortState>,\n \n+    /// The broadcast channels state this global, if it is managing any.\n+    broadcast_channel_state: DomRefCell<BroadcastChannelState>,\n+\n     /// The blobs managed by this global, if any.\n     blob_state: DomRefCell<BlobState>,\n \n@@ -237,6 +245,13 @@ struct MessageListener {\n     context: Trusted<GlobalScope>,\n }\n \n+/// A wrapper for broadcasts coming in over IPC, and the event-loop.\n+struct BroadcastListener {\n+    canceller: TaskCanceller,\n+    task_source: DOMManipulationTaskSource,\n+    context: Trusted<GlobalScope>,\n+}\n+\n /// A wrapper between timer events coming in over IPC, and the event-loop.\n struct TimerListener {\n     canceller: TaskCanceller,\n@@ -310,6 +325,23 @@ pub struct ManagedMessagePort {\n     closed: bool,\n }\n \n+/// State representing whether this global is currently managing broadcast channels.\n+#[derive(JSTraceable, MallocSizeOf)]\n+#[unrooted_must_root_lint::must_root]\n+pub enum BroadcastChannelState {\n+    /// The broadcast-channel router id for this global, and a queue of managed channels.\n+    /// Step 9, \"sort destinations\"\n+    /// of https://html.spec.whatwg.org/multipage/#dom-broadcastchannel-postmessage\n+    /// requires keeping track of creation order, hence the queue.\n+    Managed(\n+        BroadcastChannelRouterId,\n+        /// The map of channel-name to queue of channels, in order of creation.\n+        HashMap<DOMString, VecDeque<Dom<BroadcastChannel>>>,\n+    ),\n+    /// This global is not managing any broadcast channels at this time.\n+    UnManaged,\n+}\n+\n /// State representing whether this global is currently managing messageports.\n #[derive(JSTraceable, MallocSizeOf)]\n #[unrooted_must_root_lint::must_root]\n@@ -323,6 +355,29 @@ pub enum MessagePortState {\n     UnManaged,\n }\n \n+impl BroadcastListener {\n+    /// Handle a broadcast coming in over IPC,\n+    /// by queueing the appropriate task on the relevant event-loop.\n+    fn handle(&self, event: BroadcastMsg) {\n+        let context = self.context.clone();\n+\n+        // Note: strictly speaking we should just queue the message event tasks,\n+        // not queue a task that then queues more tasks.\n+        // This however seems to be hard to avoid in the light of the IPC.\n+        // One can imagine queueing tasks directly,\n+        // for channels that would be in the same script-thread.\n+        let _ = self.task_source.queue_with_canceller(\n+            task!(broadcast_message_event: move || {\n+                let global = context.root();\n+                // Step 10 of https://html.spec.whatwg.org/multipage/#dom-broadcastchannel-postmessage,\n+                // For each BroadcastChannel object destination in destinations, queue a task.\n+                global.broadcast_message_event(event, None);\n+            }),\n+            &self.canceller,\n+        );\n+    }\n+}\n+\n impl TimerListener {\n     /// Handle a timer-event coming-in over IPC,\n     /// by queuing the appropriate task on the relevant event-loop.\n@@ -501,6 +556,7 @@ impl GlobalScope {\n     ) -> Self {\n         Self {\n             message_port_state: DomRefCell::new(MessagePortState::UnManaged),\n+            broadcast_channel_state: DomRefCell::new(BroadcastChannelState::UnManaged),\n             blob_state: DomRefCell::new(BlobState::UnManaged),\n             eventtarget: EventTarget::new_inherited(),\n             crypto: Default::default(),\n@@ -613,11 +669,18 @@ impl GlobalScope {\n     pub fn perform_a_dom_garbage_collection_checkpoint(&self) {\n         self.perform_a_message_port_garbage_collection_checkpoint();\n         self.perform_a_blob_garbage_collection_checkpoint();\n+        self.perform_a_broadcast_channel_garbage_collection_checkpoint();\n+    }\n+\n+    /// Remove the routers for ports and broadcast-channels.\n+    pub fn remove_web_messaging_infra(&self) {\n+        self.remove_message_ports_router();\n+        self.remove_broadcast_channel_router();\n     }\n \n     /// Update our state to un-managed,\n     /// and tell the constellation to drop the sender to our message-port router.\n-    pub fn remove_message_ports_router(&self) {\n+    fn remove_message_ports_router(&self) {\n         if let MessagePortState::Managed(router_id, _message_ports) =\n             &*self.message_port_state.borrow()\n         {\n@@ -628,6 +691,22 @@ impl GlobalScope {\n         *self.message_port_state.borrow_mut() = MessagePortState::UnManaged;\n     }\n \n+    /// Update our state to un-managed,\n+    /// and tell the constellation to drop the sender to our broadcast router.\n+    fn remove_broadcast_channel_router(&self) {\n+        if let BroadcastChannelState::Managed(router_id, _channels) =\n+            &*self.broadcast_channel_state.borrow()\n+        {\n+            let _ =\n+                self.script_to_constellation_chan()\n+                    .send(ScriptMsg::RemoveBroadcastChannelRouter(\n+                        router_id.clone(),\n+                        self.origin().immutable().clone(),\n+                    ));\n+        }\n+        *self.broadcast_channel_state.borrow_mut() = BroadcastChannelState::UnManaged;\n+    }\n+\n     /// <https://html.spec.whatwg.org/multipage/#entangle>\n     pub fn entangle_ports(&self, port1: MessagePortId, port2: MessagePortId) {\n         if let MessagePortState::Managed(_id, message_ports) =\n@@ -789,6 +868,115 @@ impl GlobalScope {\n             .send(ScriptMsg::RerouteMessagePort(port_id, task));\n     }\n \n+    /// <https://html.spec.whatwg.org/multipage/#dom-broadcastchannel-postmessage>\n+    /// Step 7 and following steps.\n+    pub fn schedule_broadcast(&self, msg: BroadcastMsg, channel_id: &Uuid) {\n+        // First, broadcast locally.\n+        self.broadcast_message_event(msg.clone(), Some(channel_id));\n+\n+        if let BroadcastChannelState::Managed(router_id, _) =\n+            &*self.broadcast_channel_state.borrow()\n+        {\n+            // Second, broadcast to other globals via the constellation.\n+            //\n+            // Note: for globals in the same script-thread,\n+            // we could skip the hop to the constellation.\n+            let _ = self\n+                .script_to_constellation_chan()\n+                .send(ScriptMsg::ScheduleBroadcast(router_id.clone(), msg));\n+        } else {\n+            panic!(\"Attemps to broadcast a message via global not managing any channels.\");\n+        }\n+    }\n+\n+    /// <https://html.spec.whatwg.org/multipage/#dom-broadcastchannel-postmessage>\n+    /// Step 7 and following steps.\n+    pub fn broadcast_message_event(&self, event: BroadcastMsg, channel_id: Option<&Uuid>) {\n+        if let BroadcastChannelState::Managed(_, channels) = &*self.broadcast_channel_state.borrow()\n+        {\n+            let BroadcastMsg {\n+                data,\n+                origin,\n+                channel_name,\n+            } = event;\n+\n+            // Step 7, a few preliminary steps.\n+\n+            // - Check the worker is not closing.\n+            if let Some(worker) = self.downcast::<WorkerGlobalScope>() {\n+                if worker.is_closing() {\n+                    return;\n+                }\n+            }\n+\n+            // - Check the associated document is fully-active.\n+            if let Some(window) = self.downcast::<Window>() {\n+                if !window.Document().is_fully_active() {\n+                    return;\n+                }\n+            }\n+\n+            // - Check for a case-sensitive match for the name of the channel.\n+            let channel_name = DOMString::from_string(channel_name);\n+\n+            if let Some(channels) = channels.get(&channel_name) {\n+                channels\n+                    .iter()\n+                    .filter(|ref channel| {\n+                        // Step 8.\n+                        // Filter out the sender.\n+                        if let Some(id) = channel_id {\n+                            channel.id() != id\n+                        } else {\n+                            true\n+                        }\n+                    })\n+                    .map(|channel| DomRoot::from_ref(&**channel))\n+                    // Step 9, sort by creation order,\n+                    // done by using a queue to store channels in creation order.\n+                    .for_each(|channel| {\n+                        let data = data.clone_for_broadcast();\n+                        let origin = origin.clone();\n+\n+                        // Step 10: Queue a task on the DOM manipulation task-source,\n+                        // to fire the message event\n+                        let channel = Trusted::new(&*channel);\n+                        let global = Trusted::new(&*self);\n+                        let _ = self.dom_manipulation_task_source().queue(\n+                            task!(process_pending_port_messages: move || {\n+                                let destination = channel.root();\n+                                let global = global.root();\n+\n+                                // 10.1 Check for closed flag.\n+                                if destination.closed() {\n+                                    return;\n+                                }\n+\n+                                rooted!(in(*global.get_cx()) let mut message = UndefinedValue());\n+\n+                                // Step 10.3 StructuredDeserialize(serialized, targetRealm).\n+                                if let Ok(ports) = structuredclone::read(&global, data, message.handle_mut()) {\n+                                    // Step 10.4, Fire an event named message at destination.\n+                                    MessageEvent::dispatch_jsval(\n+                                        &*destination.upcast(),\n+                                        &global,\n+                                        message.handle(),\n+                                        Some(&origin.ascii_serialization()),\n+                                        None,\n+                                        ports,\n+                                    );\n+                                } else {\n+                                    // Step 10.3, fire an event named messageerror at destination.\n+                                    MessageEvent::dispatch_error(&*destination.upcast(), &global);\n+                                }\n+                            }),\n+                            &self,\n+                        );\n+                    });\n+            }\n+        }\n+    }\n+\n     /// Route the task to be handled by the relevant port.\n     pub fn route_task_to_port(&self, port_id: MessagePortId, task: PortMessageTask) {\n         let should_dispatch = if let MessagePortState::Managed(_id, message_ports) =\n@@ -905,6 +1093,93 @@ impl GlobalScope {\n         }\n     }\n \n+    /// Remove broadcast-channels that are closed.\n+    /// TODO: Also remove them if they do not have an event-listener.\n+    /// see https://github.com/servo/servo/issues/25772\n+    pub fn perform_a_broadcast_channel_garbage_collection_checkpoint(&self) {\n+        let is_empty = if let BroadcastChannelState::Managed(router_id, ref mut channels) =\n+            &mut *self.broadcast_channel_state.borrow_mut()\n+        {\n+            channels.retain(|name, ref mut channels| {\n+                channels.retain(|ref chan| !chan.closed());\n+                if channels.is_empty() {\n+                    let _ = self.script_to_constellation_chan().send(\n+                        ScriptMsg::RemoveBroadcastChannelNameInRouter(\n+                            router_id.clone(),\n+                            name.to_string(),\n+                            self.origin().immutable().clone(),\n+                        ),\n+                    );\n+                    false\n+                } else {\n+                    true\n+                }\n+            });\n+            channels.is_empty()\n+        } else {\n+            false\n+        };\n+        if is_empty {\n+            self.remove_broadcast_channel_router();\n+        }\n+    }\n+\n+    /// Start tracking a broadcast-channel.\n+    pub fn track_broadcast_channel(&self, dom_channel: &BroadcastChannel) {\n+        let mut current_state = self.broadcast_channel_state.borrow_mut();\n+\n+        if let BroadcastChannelState::UnManaged = &*current_state {\n+            // Setup a route for IPC, for broadcasts from the constellation to our channels.\n+            let (broadcast_control_sender, broadcast_control_receiver) =\n+                ipc::channel().expect(\"ipc channel failure\");\n+            let context = Trusted::new(self);\n+            let (task_source, canceller) = (\n+                self.dom_manipulation_task_source(),\n+                self.task_canceller(TaskSourceName::DOMManipulation),\n+            );\n+            let listener = BroadcastListener {\n+                canceller,\n+                task_source,\n+                context,\n+            };\n+            ROUTER.add_route(\n+                broadcast_control_receiver.to_opaque(),\n+                Box::new(move |message| {\n+                    let msg = message.to();\n+                    match msg {\n+                        Ok(msg) => listener.handle(msg),\n+                        Err(err) => warn!(\"Error receiving a BroadcastMsg: {:?}\", err),\n+                    }\n+                }),\n+            );\n+            let router_id = BroadcastChannelRouterId::new();\n+            *current_state = BroadcastChannelState::Managed(router_id.clone(), HashMap::new());\n+            let _ = self\n+                .script_to_constellation_chan()\n+                .send(ScriptMsg::NewBroadcastChannelRouter(\n+                    router_id,\n+                    broadcast_control_sender,\n+                    self.origin().immutable().clone(),\n+                ));\n+        }\n+\n+        if let BroadcastChannelState::Managed(router_id, channels) = &mut *current_state {\n+            let entry = channels.entry(dom_channel.Name()).or_insert_with(|| {\n+                let _ = self.script_to_constellation_chan().send(\n+                    ScriptMsg::NewBroadcastChannelNameInRouter(\n+                        router_id.clone(),\n+                        dom_channel.Name().to_string(),\n+                        self.origin().immutable().clone(),\n+                    ),\n+                );\n+                VecDeque::new()\n+            });\n+            entry.push_back(Dom::from_ref(dom_channel));\n+        } else {\n+            panic!(\"track_broadcast_channel should have first switched the state to managed.\");\n+        }\n+    }\n+\n     /// Start tracking a message-port\n     pub fn track_message_port(&self, dom_port: &MessagePort, port_impl: Option<MessagePortImpl>) {\n         let mut current_state = self.message_port_state.borrow_mut();"
      },
      {
        "sha": "fba7200c89234fc3a98ca6adda4ea1553742937e",
        "filename": "components/script/dom/mod.rs",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/mod.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/mod.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script/dom/mod.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -239,6 +239,7 @@ pub mod bluetoothremotegattdescriptor;\n pub mod bluetoothremotegattserver;\n pub mod bluetoothremotegattservice;\n pub mod bluetoothuuid;\n+pub mod broadcastchannel;\n pub mod canvasgradient;\n pub mod canvaspattern;\n pub mod canvasrenderingcontext2d;"
      },
      {
        "sha": "6d72f3997cf5c706a01fe1c1a3fc6a7816fcd435",
        "filename": "components/script/dom/webidls/BroadcastChannel.webidl",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/webidls/BroadcastChannel.webidl",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/webidls/BroadcastChannel.webidl",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script/dom/webidls/BroadcastChannel.webidl?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -0,0 +1,18 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+/*\n+ * The origin of this IDL file is:\n+ * https://html.spec.whatwg.org/multipage/#broadcastchannel\n+ */\n+\n+[Exposed=(Window,Worker)]\n+interface BroadcastChannel : EventTarget {\n+  constructor(DOMString name);\n+\n+  readonly attribute DOMString name;\n+  [Throws] void postMessage(any message);\n+  void close();\n+  attribute EventHandler onmessage;\n+  attribute EventHandler onmessageerror;\n+};"
      },
      {
        "sha": "c2679c2899a1bd6346d8a809ae12c06c11b362fb",
        "filename": "components/script/dom/window.rs",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/window.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script/dom/window.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script/dom/window.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1407,8 +1407,8 @@ impl Window {\n             .upcast::<Node>()\n             .teardown(self.layout_chan());\n \n-        // Tell the constellation to drop the sender to our message-port router, if there is any.\n-        self.upcast::<GlobalScope>().remove_message_ports_router();\n+        // Remove the infra for managing messageports and broadcast channels.\n+        self.upcast::<GlobalScope>().remove_web_messaging_infra();\n \n         // Clean up any active promises\n         // https://github.com/servo/servo/issues/15318"
      },
      {
        "sha": "9b4588a3cb0ede9ef32b81f52ba7c881909c2cb2",
        "filename": "components/script_traits/lib.rs",
        "status": "modified",
        "additions": 64,
        "deletions": 1,
        "changes": 65,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script_traits/lib.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script_traits/lib.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script_traits/lib.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -21,7 +21,7 @@ pub mod serializable;\n pub mod transferable;\n pub mod webdriver_msg;\n \n-use crate::serializable::BlobImpl;\n+use crate::serializable::{BlobData, BlobImpl};\n use crate::transferable::MessagePortImpl;\n use crate::webdriver_msg::{LoadStatus, WebDriverScriptCommand};\n use bluetooth_traits::BluetoothRequest;\n@@ -955,6 +955,48 @@ pub struct StructuredSerializedData {\n     pub ports: Option<HashMap<MessagePortId, MessagePortImpl>>,\n }\n \n+impl StructuredSerializedData {\n+    /// Clone the serialized data for use with broadcast-channels.\n+    pub fn clone_for_broadcast(&self) -> StructuredSerializedData {\n+        let serialized = self.serialized.clone();\n+\n+        let blobs = if let Some(blobs) = self.blobs.as_ref() {\n+            let mut blob_clones = HashMap::with_capacity(blobs.len());\n+\n+            for (original_id, blob) in blobs.iter() {\n+                let type_string = blob.type_string();\n+\n+                if let BlobData::Memory(ref bytes) = blob.blob_data() {\n+                    let blob_clone = BlobImpl::new_from_bytes(bytes.clone(), type_string);\n+\n+                    // Note: we insert the blob at the original id,\n+                    // otherwise this will not match the storage key as serialized by SM in `serialized`.\n+                    // The clone has it's own new Id however.\n+                    blob_clones.insert(original_id.clone(), blob_clone);\n+                } else {\n+                    // Not panicking only because this is called from the constellation.\n+                    warn!(\"Serialized blob not in memory format(should never happen).\");\n+                }\n+            }\n+            Some(blob_clones)\n+        } else {\n+            None\n+        };\n+\n+        if self.ports.is_some() {\n+            // Not panicking only because this is called from the constellation.\n+            warn!(\"Attempt to broadcast structured serialized data including ports(should never happen).\");\n+        }\n+\n+        StructuredSerializedData {\n+            serialized,\n+            blobs,\n+            // Ports cannot be broadcast.\n+            ports: None,\n+        }\n+    }\n+}\n+\n /// A task on the https://html.spec.whatwg.org/multipage/#port-message-queue\n #[derive(Debug, Deserialize, MallocSizeOf, Serialize)]\n pub struct PortMessageTask {\n@@ -979,6 +1021,27 @@ pub enum MessagePortMsg {\n     NewTask(MessagePortId, PortMessageTask),\n }\n \n+/// Message for communication between the constellation and a global managing broadcast channels.\n+#[derive(Debug, Deserialize, Serialize)]\n+pub struct BroadcastMsg {\n+    /// The origin of this message.\n+    pub origin: ImmutableOrigin,\n+    /// The name of the channel.\n+    pub channel_name: String,\n+    /// A data-holder for serialized data.\n+    pub data: StructuredSerializedData,\n+}\n+\n+impl Clone for BroadcastMsg {\n+    fn clone(&self) -> BroadcastMsg {\n+        BroadcastMsg {\n+            data: self.data.clone_for_broadcast(),\n+            origin: self.origin.clone(),\n+            channel_name: self.channel_name.clone(),\n+        }\n+    }\n+}\n+\n /// The type of MediaSession action.\n /// https://w3c.github.io/mediasession/#enumdef-mediasessionaction\n #[derive(Clone, Debug, Deserialize, Eq, Hash, MallocSizeOf, PartialEq, Serialize)]"
      },
      {
        "sha": "918b4f4ff7814949e8e28a1ebfcf59ab7b18072a",
        "filename": "components/script_traits/script_msg.rs",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script_traits/script_msg.rs",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/components/script_traits/script_msg.rs",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/components/script_traits/script_msg.rs?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -4,6 +4,7 @@\n \n use crate::AnimationState;\n use crate::AuxiliaryBrowsingContextLoadInfo;\n+use crate::BroadcastMsg;\n use crate::DocumentState;\n use crate::IFrameLoadInfoWithData;\n use crate::LayoutControlMsg;\n@@ -22,7 +23,8 @@ use euclid::Size2D;\n use gfx_traits::Epoch;\n use ipc_channel::ipc::{IpcReceiver, IpcSender};\n use msg::constellation_msg::{\n-    BrowsingContextId, MessagePortId, MessagePortRouterId, PipelineId, TopLevelBrowsingContextId,\n+    BroadcastChannelRouterId, BrowsingContextId, MessagePortId, MessagePortRouterId, PipelineId,\n+    TopLevelBrowsingContextId,\n };\n use msg::constellation_msg::{HistoryStateId, TraversalDirection};\n use net_traits::request::RequestBuilder;\n@@ -142,6 +144,21 @@ pub enum ScriptMsg {\n     RemoveMessagePort(MessagePortId),\n     /// Entangle two message-ports.\n     EntanglePorts(MessagePortId, MessagePortId),\n+    /// A global has started managing broadcast-channels.\n+    NewBroadcastChannelRouter(\n+        BroadcastChannelRouterId,\n+        IpcSender<BroadcastMsg>,\n+        ImmutableOrigin,\n+    ),\n+    /// A global has stopped managing broadcast-channels.\n+    RemoveBroadcastChannelRouter(BroadcastChannelRouterId, ImmutableOrigin),\n+    /// A global started managing broadcast channels for a given channel-name.\n+    NewBroadcastChannelNameInRouter(BroadcastChannelRouterId, String, ImmutableOrigin),\n+    /// A global stopped managing broadcast channels for a given channel-name.\n+    RemoveBroadcastChannelNameInRouter(BroadcastChannelRouterId, String, ImmutableOrigin),\n+    /// Broadcast a message to all same-origin broadcast channels,\n+    /// excluding the source of the broadcast.\n+    ScheduleBroadcast(BroadcastChannelRouterId, BroadcastMsg),\n     /// Forward a message to the embedder.\n     ForwardToEmbedder(EmbedderMsg),\n     /// Requests are sent to constellation and fetches are checked manually\n@@ -280,6 +297,11 @@ impl fmt::Debug for ScriptMsg {\n             RemoveMessagePort(..) => \"RemoveMessagePort\",\n             MessagePortShipped(..) => \"MessagePortShipped\",\n             EntanglePorts(..) => \"EntanglePorts\",\n+            NewBroadcastChannelRouter(..) => \"NewBroadcastChannelRouter\",\n+            RemoveBroadcastChannelRouter(..) => \"RemoveBroadcastChannelRouter\",\n+            RemoveBroadcastChannelNameInRouter(..) => \"RemoveBroadcastChannelNameInRouter\",\n+            NewBroadcastChannelNameInRouter(..) => \"NewBroadcastChannelNameInRouter\",\n+            ScheduleBroadcast(..) => \"ScheduleBroadcast\",\n             ForwardToEmbedder(..) => \"ForwardToEmbedder\",\n             InitiateNavigateRequest(..) => \"InitiateNavigateRequest\",\n             BroadcastStorageEvent(..) => \"BroadcastStorageEvent\","
      },
      {
        "sha": "ce655a6864cf1dccb207b222466b5fedb8180c57",
        "filename": "tests/wpt/metadata/MANIFEST.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/MANIFEST.json",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/MANIFEST.json",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/MANIFEST.json?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -550029,7 +550029,7 @@\n     ],\n     \"broadcastchannel\": {\n      \"basics.html\": [\n-      \"ed16e32f5437dc430b5cc11b967e6538ef6cf393\",\n+      \"3d8ba76fb1ba35658c44702059925fe53e3fb6f6\",\n       [\n        null,\n        {}"
      },
      {
        "sha": "1e1b550fe8b3e24b0811a3b2d46ab8b812e89406",
        "filename": "tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-BarProp.window.js.ini",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-BarProp.window.js.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-BarProp.window.js.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-BarProp.window.js.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1,10 +1,11 @@\n [noopener-noreferrer-BarProp.window.html]\n+  expected: TIMEOUT\n   [window.open() with noopener should have all bars visible]\n-    expected: FAIL\n+    expected: TIMEOUT\n \n   [All bars visible]\n     expected: FAIL\n \n   [window.open() with noreferrer should have all bars visible]\n-    expected: FAIL\n+    expected: TIMEOUT\n "
      },
      {
        "sha": "4a20e2825db037c54f32f97f51f63decd62b48c8",
        "filename": "tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-sizing.window.js.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-sizing.window.js.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-sizing.window.js.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/browsers/the-window-object/noopener-noreferrer-sizing.window.js.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,7 +0,0 @@\n-[noopener-noreferrer-sizing.window.html]\n-  [window.open() with noreferrer should have equal viewport width and height]\n-    expected: FAIL\n-\n-  [window.open() with noopener should have equal viewport width and height]\n-    expected: FAIL\n-"
      },
      {
        "sha": "c45070fd8ed12698feacb256274ecd1b4e47c082",
        "filename": "tests/wpt/metadata/html/browsers/the-window-object/window-open-noopener.html.ini",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/browsers/the-window-object/window-open-noopener.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/browsers/the-window-object/window-open-noopener.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/browsers/the-window-object/window-open-noopener.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -36,7 +36,6 @@\n \n \n [window-open-noopener.html?indexed]\n-  expected: ERROR\n   [window.open() with 'noopener' should not reuse existing target]\n     expected: FAIL\n \n@@ -49,30 +48,6 @@\n   [noopener needs to be present as a token on its own yet again]\n     expected: NOTRUN\n \n-  [Trailing noopener should work]\n-    expected: NOTRUN\n-\n-  [Leading noopener should work]\n-    expected: NOTRUN\n-\n-  [Interior noopener should work]\n-    expected: NOTRUN\n-\n-  [noopener=1 means the same as noopener]\n-    expected: NOTRUN\n-\n-  [noopener=0 means lack of noopener]\n-    expected: NOTRUN\n-\n-  [noopener separated only by spaces should work]\n-    expected: NOTRUN\n-\n-  [window.open() with 'noopener' should reuse existing target]\n-    expected: FAIL\n-\n-  [noreferrer should also suppress opener when reusing existing target]\n-    expected: NOTRUN\n-\n \n [window-open-noopener.html?_self]\n   [noopener window.open targeting _self]"
      },
      {
        "sha": "ba7f8d69f1dea7216f94ce22c822d054bc97dad8",
        "filename": "tests/wpt/metadata/html/browsers/the-window-object/window-open-noreferrer.html.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/html/browsers/the-window-object/window-open-noreferrer.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/html/browsers/the-window-object/window-open-noreferrer.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/browsers/the-window-object/window-open-noreferrer.html.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,4 +0,0 @@\n-[window-open-noreferrer.html]\n-  [window.open() with \"noreferrer\" tests]\n-    expected: FAIL\n-"
      },
      {
        "sha": "371d4043a67b6cd39dc1799be32cdbc3ff195ada",
        "filename": "tests/wpt/metadata/html/dom/idlharness.https.html.ini",
        "status": "modified",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/dom/idlharness.https.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/dom/idlharness.https.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/dom/idlharness.https.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -332,18 +332,12 @@\n   [CanvasRenderingContext2D interface: operation scrollPathIntoView(Path2D)]\n     expected: FAIL\n \n-  [BroadcastChannel interface: attribute name]\n-    expected: FAIL\n-\n   [ApplicationCache interface object name]\n     expected: FAIL\n \n   [DOMStringList interface: calling item(unsigned long) on location.ancestorOrigins with too few arguments must throw TypeError]\n     expected: FAIL\n \n-  [BroadcastChannel interface: existence and properties of interface prototype object's \"constructor\" property]\n-    expected: FAIL\n-\n   [BarProp interface object length]\n     expected: FAIL\n \n@@ -704,9 +698,6 @@\n   [OffscreenCanvasRenderingContext2D interface object name]\n     expected: FAIL\n \n-  [BroadcastChannel interface: attribute onmessage]\n-    expected: FAIL\n-\n   [ElementInternals interface object name]\n     expected: FAIL\n \n@@ -800,9 +791,6 @@\n   [ApplicationCache interface: attribute onerror]\n     expected: FAIL\n \n-  [BroadcastChannel interface: existence and properties of interface object]\n-    expected: FAIL\n-\n   [SVGElement interface: attribute onsubmit]\n     expected: FAIL\n \n@@ -968,9 +956,6 @@\n   [SVGElement interface: attribute onkeydown]\n     expected: FAIL\n \n-  [BroadcastChannel interface: existence and properties of interface prototype object's @@unscopables property]\n-    expected: FAIL\n-\n   [Path2D interface: existence and properties of interface prototype object's \"constructor\" property]\n     expected: FAIL\n \n@@ -1067,9 +1052,6 @@\n   [OffscreenCanvas interface object name]\n     expected: FAIL\n \n-  [BroadcastChannel interface: operation close()]\n-    expected: FAIL\n-\n   [SVGElement interface: attribute onresize]\n     expected: FAIL\n \n@@ -1166,9 +1148,6 @@\n   [ImageBitmap interface: attribute width]\n     expected: FAIL\n \n-  [BroadcastChannel interface: operation postMessage(any)]\n-    expected: FAIL\n-\n   [DataTransfer interface: attribute types]\n     expected: FAIL\n \n@@ -1214,18 +1193,12 @@\n   [SVGElement interface: attribute onvolumechange]\n     expected: FAIL\n \n-  [BroadcastChannel interface object name]\n-    expected: FAIL\n-\n   [CanvasRenderingContext2D interface: attribute textBaseline]\n     expected: FAIL\n \n   [ImageBitmapRenderingContext interface object length]\n     expected: FAIL\n \n-  [BroadcastChannel interface: existence and properties of interface prototype object]\n-    expected: FAIL\n-\n   [Path2D interface: operation addPath(Path2D, DOMMatrix2DInit)]\n     expected: FAIL\n \n@@ -1307,9 +1280,6 @@\n   [CanvasRenderingContext2D interface: document.createElement(\"canvas\").getContext(\"2d\") must inherit property \"scrollPathIntoView()\" with the proper type]\n     expected: FAIL\n \n-  [BroadcastChannel interface: attribute onmessageerror]\n-    expected: FAIL\n-\n   [OffscreenCanvas interface: operation convertToBlob(ImageEncodeOptions)]\n     expected: FAIL\n \n@@ -1331,9 +1301,6 @@\n   [ValidityState interface: document.createElement(\"input\").validity must inherit property \"valid\" with the proper type]\n     expected: FAIL\n \n-  [BroadcastChannel interface object length]\n-    expected: FAIL\n-\n   [Location interface: stringifier]\n     expected: FAIL\n \n@@ -4442,4 +4409,3 @@\n \n   [HTMLImageElement interface: document.createElement(\"img\") must inherit property \"loading\" with the proper type]\n     expected: FAIL\n-"
      },
      {
        "sha": "f57c866227a40bf01f89dcb18ce4a56a100b2415",
        "filename": "tests/wpt/metadata/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/no-coop-coep.https.any.js.ini",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/no-coop-coep.https.any.js.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/no-coop-coep.https.any.js.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/infrastructure/safe-passing-of-structured-data/shared-array-buffers/no-coop-coep.https.any.js.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1,15 +1,9 @@\n [no-coop-coep.https.any.worker.html]\n-  [SharedArrayBuffer over BroadcastChannel without COOP+COEP]\n-    expected: FAIL\n-\n   [Bonus: self.crossOriginIsolated]\n     expected: FAIL\n \n \n [no-coop-coep.https.any.html]\n-  [SharedArrayBuffer over BroadcastChannel without COOP+COEP]\n-    expected: FAIL\n-\n   [Bonus: self.crossOriginIsolated]\n     expected: FAIL\n "
      },
      {
        "sha": "7406e8444428baa6e066b9b74581f542fc259afc",
        "filename": "tests/wpt/metadata/html/semantics/forms/form-submission-target/rel-base-target.html.ini",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/forms/form-submission-target/rel-base-target.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/forms/form-submission-target/rel-base-target.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/semantics/forms/form-submission-target/rel-base-target.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1,4 +1,5 @@\n [rel-base-target.html]\n+  expected: TIMEOUT\n   [<form rel=\"noreferrer opener\"> with <base target>]\n     expected: FAIL\n "
      },
      {
        "sha": "1d9f9c2e9109d81ed37f5505a96c3a941e85bafe",
        "filename": "tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/htmlanchorelement_noopener.html.ini",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/htmlanchorelement_noopener.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/htmlanchorelement_noopener.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/htmlanchorelement_noopener.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1,6 +1,5 @@\n [htmlanchorelement_noopener.html]\n   type: testharness\n-  expected: ERROR\n   [Check that targeting of rel=noopener with a given name ignores an existing window with that name]\n     expected: NOTRUN\n \n@@ -11,7 +10,7 @@\n     expected: FAIL\n \n   [Check that targeting of rel=noopener with a given name reuses an existing window with that name]\n-    expected: NOTRUN\n+    expected: FAIL\n \n   [Check that rel=noopener with target=_self does a normal load]\n     expected: FAIL"
      },
      {
        "sha": "b95c66a34c9c614967796a7b12f73b89550d6888",
        "filename": "tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener.html.ini",
        "status": "modified",
        "additions": 6,
        "deletions": 26,
        "changes": 32,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1,40 +1,20 @@\n [target_blank_implicit_noopener.html]\n-  [Anchor element with target=_blank with rel=opener+noopener]\n-    expected: FAIL\n-\n+  expected: TIMEOUT\n   [Area element with target=_blank with rel=opener+noopener]\n-    expected: FAIL\n-\n-  [Anchor element with target=_blank with rel=noopener+opener+noreferrer]\n-    expected: FAIL\n-\n-  [Anchor element with target=_blank with rel=opener]\n-    expected: FAIL\n-\n-  [Anchor element with target=_blank with rel=noopener+opener]\n-    expected: FAIL\n+    expected: TIMEOUT\n \n   [Area element with target=_blank with rel=noopener]\n-    expected: FAIL\n+    expected: TIMEOUT\n \n   [Area element with target=_blank with rel=opener]\n-    expected: FAIL\n+    expected: TIMEOUT\n \n   [Anchor element with target=_blank with implicit rel=noopener]\n     expected: FAIL\n \n-  [Anchor element with target=_blank with rel=opener+noreferrer]\n-    expected: FAIL\n-\n   [Area element with target=_blank with implicit rel=noopener]\n-    expected: FAIL\n-\n-  [Anchor element with target=_blank with rel=noreferrer]\n-    expected: FAIL\n+    expected: TIMEOUT\n \n   [Area element with target=_blank with rel=noopener+opener]\n-    expected: FAIL\n-\n-  [Anchor element with target=_blank with rel=noopener]\n-    expected: FAIL\n+    expected: TIMEOUT\n "
      },
      {
        "sha": "221be6c145f19b44abd97271ef375ea5123d7453",
        "filename": "tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener_base.html.ini",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener_base.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener_base.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/html/semantics/links/links-created-by-a-and-area-elements/target_blank_implicit_noopener_base.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1,4 +1,5 @@\n [target_blank_implicit_noopener_base.html]\n+  expected: TIMEOUT\n   [Anchor element with base target=_blank with implicit rel=noopener]\n     expected: FAIL\n "
      },
      {
        "sha": "d0bc235ec99403435823d9c6edec4369e6850f31",
        "filename": "tests/wpt/metadata/webmessaging/MessageEvent-trusted.html.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/MessageEvent-trusted.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/MessageEvent-trusted.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/webmessaging/MessageEvent-trusted.html.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,4 +0,0 @@\n-[MessageEvent-trusted.html]\n-  [With a BroadcastChannel]\n-    expected: FAIL\n-"
      },
      {
        "sha": "d3e0ec12be6ded9877aeaea90ad028d7a7297c09",
        "filename": "tests/wpt/metadata/webmessaging/broadcastchannel/basics.html.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/basics.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/basics.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/webmessaging/broadcastchannel/basics.html.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,16 +0,0 @@\n-[basics.html]\n-  [messages are delivered in port creation order]\n-    expected: FAIL\n-\n-  [closing and creating channels during message delivery works correctly]\n-    expected: FAIL\n-\n-  [messages aren't delivered to a closed port]\n-    expected: FAIL\n-\n-  [Closing a channel in onmessage doesn't cancel already queued events]\n-    expected: FAIL\n-\n-  [postMessage results in correct event]\n-    expected: FAIL\n-"
      },
      {
        "sha": "3f8179adc2b9c6246f8ad0acc76474404dc2f1b9",
        "filename": "tests/wpt/metadata/webmessaging/broadcastchannel/blobs.html.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/blobs.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/blobs.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/webmessaging/broadcastchannel/blobs.html.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,7 +0,0 @@\n-[blobs.html]\n-  [Blobs work with workers on BroadcastChannel]\n-    expected: FAIL\n-\n-  [Blobs work on BroadcastChannel]\n-    expected: FAIL\n-"
      },
      {
        "sha": "7893dea122ff883ab9aee105d65a9765f671ea29",
        "filename": "tests/wpt/metadata/webmessaging/broadcastchannel/interface.html.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/interface.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/interface.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/webmessaging/broadcastchannel/interface.html.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,40 +0,0 @@\n-[interface.html]\n-  [Null name should not throw]\n-    expected: FAIL\n-\n-  [postMessage after close should throw]\n-    expected: FAIL\n-\n-  [Undefined name should not throw]\n-    expected: FAIL\n-\n-  [postMessage should throw with uncloneable data]\n-    expected: FAIL\n-\n-  [close should not throw when called multiple times]\n-    expected: FAIL\n-\n-  [close should not throw]\n-    expected: FAIL\n-\n-  [Non-empty name should not throw]\n-    expected: FAIL\n-\n-  [postMessage with null should not throw]\n-    expected: FAIL\n-\n-  [postMessage should throw InvalidStateError after close, even with uncloneable data]\n-    expected: FAIL\n-\n-  [BroadcastChannel should have an onmessage event]\n-    expected: FAIL\n-\n-  [Non-string name should not throw]\n-    expected: FAIL\n-\n-  [Should throw if no name is provided]\n-    expected: FAIL\n-\n-  [postMessage without parameters should throw]\n-    expected: FAIL\n-"
      },
      {
        "sha": "d9c4160686043eb52140a99e6051a18427a96472",
        "filename": "tests/wpt/metadata/webmessaging/broadcastchannel/origin.window.js.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/origin.window.js.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/origin.window.js.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/webmessaging/broadcastchannel/origin.window.js.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,5 +0,0 @@\n-[origin.window.html]\n-  expected: TIMEOUT\n-  [Serialization of BroadcastChannel origin]\n-    expected: TIMEOUT\n-"
      },
      {
        "sha": "d8180a26ca92b9c28f44c1dc4517a1d54cd1054c",
        "filename": "tests/wpt/metadata/webmessaging/broadcastchannel/sandbox.html.ini",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/servo/servo/blob/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/sandbox.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/13977bbeddd25cff0a4c5ed1adb17936501de1fe/tests/wpt/metadata/webmessaging/broadcastchannel/sandbox.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/webmessaging/broadcastchannel/sandbox.html.ini?ref=13977bbeddd25cff0a4c5ed1adb17936501de1fe",
        "patch": "@@ -1,4 +0,0 @@\n-[sandbox.html]\n-  [Creating BroadcastChannel in an opaque origin]\n-    expected: FAIL\n-"
      },
      {
        "sha": "61913c3d04a1cfd2fab62217744110948047686a",
        "filename": "tests/wpt/metadata/webmessaging/broadcastchannel/workers.html.ini",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/webmessaging/broadcastchannel/workers.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/webmessaging/broadcastchannel/workers.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/webmessaging/broadcastchannel/workers.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -1,17 +1,4 @@\n [workers.html]\n-  expected: TIMEOUT\n-  [BroadcastChannel used after a worker self.close()]\n-    expected: FAIL\n-\n   [BroadcastChannel works in shared workers]\n     expected: FAIL\n \n-  [BroadcastChannel works in workers]\n-    expected: FAIL\n-\n-  [BroadcastChannel created after a worker self.close()]\n-    expected: TIMEOUT\n-\n-  [Closing and re-opening a channel works.]\n-    expected: FAIL\n-"
      },
      {
        "sha": "42e14cf07094052d5896debdcd188bab754303c5",
        "filename": "tests/wpt/metadata/workers/opaque-origin.html.ini",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/workers/opaque-origin.html.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/workers/opaque-origin.html.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/workers/opaque-origin.html.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -8,7 +8,3 @@\n \n   [Worker has an opaque origin.]\n     expected: FAIL\n-\n-  [Worker can access BroadcastChannel]\n-    expected: FAIL\n-"
      },
      {
        "sha": "b9c13b0592dbaa5f457bd9c33eae0ebdd2c96c37",
        "filename": "tests/wpt/metadata/workers/semantics/interface-objects/001.worker.js.ini",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/workers/semantics/interface-objects/001.worker.js.ini",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/metadata/workers/semantics/interface-objects/001.worker.js.ini",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/metadata/workers/semantics/interface-objects/001.worker.js.ini?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -12,9 +12,6 @@\n   [The Path2D interface object should be exposed.]\n     expected: FAIL\n \n-  [The BroadcastChannel interface object should be exposed.]\n-    expected: FAIL\n-\n   [The ReadableStream interface object should be exposed.]\n     expected: FAIL\n \n@@ -59,3 +56,4 @@\n \n   [The IDBTransaction interface object should be exposed.]\n     expected: FAIL\n+"
      },
      {
        "sha": "3f09d075258c7656cc2308c2900eb56968959a84",
        "filename": "tests/wpt/mozilla/meta/MANIFEST.json",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/meta/MANIFEST.json",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/meta/MANIFEST.json",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/mozilla/meta/MANIFEST.json?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -10971,7 +10971,7 @@\n      []\n     ],\n     \"interfaces.js\": [\n-     \"c46c336f8a8a2db777f75d6236b1241c717a02dd\",\n+     \"689016240d603459ee1b633a5e80009291376396\",\n      []\n     ],\n     \"nested_asap_script.js\": [\n@@ -13863,14 +13863,14 @@\n      ]\n     ],\n     \"interfaces.html\": [\n-     \"163ab416b1627e07347b83aa210712364182343a\",\n+     \"12f1d0b7f17be6575d4527423aed0ec845c4c2d5\",\n      [\n       null,\n       {}\n      ]\n     ],\n     \"interfaces.worker.js\": [\n-     \"3f77783a6cc31e7803dd61873ba17c92ce12eccc\",\n+     \"c1223084790b2980c8184e3cd9ab5ae17bc8b303\",\n      [\n       \"mozilla/interfaces.worker.html\",\n       {}"
      },
      {
        "sha": "12f1d0b7f17be6575d4527423aed0ec845c4c2d5",
        "filename": "tests/wpt/mozilla/tests/mozilla/interfaces.html",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/tests/mozilla/interfaces.html",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/tests/mozilla/interfaces.html",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/mozilla/tests/mozilla/interfaces.html?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -28,6 +28,7 @@\n   \"BeforeUnloadEvent\",\n   \"BiquadFilterNode\",\n   \"Blob\",\n+  \"BroadcastChannel\",\n   \"CanvasGradient\",\n   \"CanvasRenderingContext2D\",\n   \"CanvasPattern\","
      },
      {
        "sha": "689016240d603459ee1b633a5e80009291376396",
        "filename": "tests/wpt/mozilla/tests/mozilla/interfaces.js",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/tests/mozilla/interfaces.js",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/tests/mozilla/interfaces.js",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/mozilla/tests/mozilla/interfaces.js?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -7,6 +7,7 @@ function test_interfaces(interfaceNamesInGlobalScope) {\n       \"ArrayBuffer\",\n       \"Atomics\",\n       \"Boolean\",\n+      \"BroadcastChannel\",\n       \"Crypto\",\n       \"DataView\",\n       \"Date\","
      },
      {
        "sha": "c1223084790b2980c8184e3cd9ab5ae17bc8b303",
        "filename": "tests/wpt/mozilla/tests/mozilla/interfaces.worker.js",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/tests/mozilla/interfaces.worker.js",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/mozilla/tests/mozilla/interfaces.worker.js",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/mozilla/tests/mozilla/interfaces.worker.js?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -8,6 +8,7 @@ importScripts(\"interfaces.js\");\n // IMPORTANT: Do not change the list below without review from a DOM peer!\n test_interfaces([\n   \"Blob\",\n+  \"BroadcastChannel\",\n   \"CanvasGradient\",\n   \"CanvasPattern\",\n   \"CloseEvent\","
      },
      {
        "sha": "3d8ba76fb1ba35658c44702059925fe53e3fb6f6",
        "filename": "tests/wpt/web-platform-tests/webmessaging/broadcastchannel/basics.html",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/servo/servo/blob/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/web-platform-tests/webmessaging/broadcastchannel/basics.html",
        "raw_url": "https://github.com/servo/servo/raw/c9c5f8b9e545ae292d4ccb256758cb681a744612/tests/wpt/web-platform-tests/webmessaging/broadcastchannel/basics.html",
        "contents_url": "https://api.github.com/repos/servo/servo/contents/tests/wpt/web-platform-tests/webmessaging/broadcastchannel/basics.html?ref=c9c5f8b9e545ae292d4ccb256758cb681a744612",
        "patch": "@@ -69,6 +69,17 @@\n     c1.postMessage('test');\n   }, 'messages aren\\'t delivered to a closed port');\n \n+ async_test(t => {\n+    let c1 = new BroadcastChannel('closed');\n+    let c2 = new BroadcastChannel('closed');\n+    let c3 = new BroadcastChannel('closed');\n+\n+    c2.onmessage = t.unreached_func();\n+    c3.onmessage = t.step_func(() => t.done());\n+    c1.postMessage('test');\n+    c2.close();\n+}, 'messages aren\\'t delivered to a port closed after calling postMessage.');\n+\n async_test(t => {\n     let c1 = new BroadcastChannel('create-in-onmessage');\n     let c2 = new BroadcastChannel('create-in-onmessage');\n@@ -87,8 +98,6 @@\n     c2.postMessage('second');\n   }, 'closing and creating channels during message delivery works correctly');\n \n-// TODO(mek): Depending on https://github.com/whatwg/html/issues/1371 adjust\n-// this test to match the correct behavior.\n async_test(t => {\n     let c1 = new BroadcastChannel('close-in-onmessage');\n     let c2 = new BroadcastChannel('close-in-onmessage');\n@@ -108,13 +117,12 @@\n           assert_array_equals(events, [\n               'c2: first',\n               'c3: first',\n-              'c2: done',\n               'c3: done']);\n           t.done();\n         }\n       }));\n     c1.postMessage('first');\n     c1.postMessage('done');\n-  }, 'Closing a channel in onmessage doesn\\'t cancel already queued events');\n+  }, 'Closing a channel in onmessage prevents already queued tasks from firing onmessage events');\n \n </script>"
      }
    ]
  },
  {}
]